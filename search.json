[{"title":"java 复习资料","url":"https://yangzhiw.github.io/2016/08/01/java-基础题/","content":"<h1 id=\"java基础\"><a href=\"#java基础\" class=\"headerlink\" title=\"java基础\"></a>java基础</h1><p>1，面向对象和面向过程的区别<br>2，java的三大特性</p>\n<hr>\n<pre><code>封装，继承，多态\n</code></pre><p>3，OverLoad与Override的区别<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">   Override（重写，覆盖） </div><div class=\"line\">方法名、参数、返回值相同。</div><div class=\"line\">子类方法不能缩小父类方法的访问权限。</div><div class=\"line\">子类方法不能抛出比父类方法更多的异常(但子类方法可以不抛出异常)。</div><div class=\"line\">存在于父类和子类之间。</div><div class=\"line\">方法被定义为final不能被重写。</div><div class=\"line\"></div><div class=\"line\">   Overload（重载，过载）</div><div class=\"line\">参数类型、个数、顺序至少有一个不相同。  </div><div class=\"line\">不能重载只有返回值不同的方法名。</div><div class=\"line\">存在于父类和子类、同类中。</div></pre></td></tr></table></figure></p>\n<p>4，构造器不能被修饰Override<br>5，访问控制符public,protected,private,以及默认的区别<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">作用域      当前类      同包   子类    其他</div><div class=\"line\">public        √        √       √      √</div><div class=\"line\">protected     √        √       √      ×</div><div class=\"line\">default       √        √       ×      ×</div><div class=\"line\">private       √        ×       ×      ×</div></pre></td></tr></table></figure></p>\n<p>6，String和StringBuffer、StringBuilder的区别<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">可变与不可变</div><div class=\"line\">　String类中使用字符数组保存字符串，如下就是，因为有“final”修饰符，所以可以知道string对象是不可变的。</div><div class=\"line\"></div><div class=\"line\">　　　　private final char value[];</div><div class=\"line\"></div><div class=\"line\">　StringBuilder与StringBuffer都继承自AbstractStringBuilder类，在AbstractStringBuilder中也是使用字符</div><div class=\"line\"> 数组保存字符串，如下就是，可知这两种对象都是可变的。</div><div class=\"line\"></div><div class=\"line\">　　　　char[] value;</div><div class=\"line\">线程是否安全</div><div class=\"line\"> StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。</div><div class=\"line\"> StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。</div></pre></td></tr></table></figure></p>\n<p>7，抽象类和接口的区别<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>）抽象类可以提供成员方法的实现细节，而接口中只能存在public abstract 方法；</div><div class=\"line\"></div><div class=\"line\">　　<span class=\"number\">2</span>）抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的；</div><div class=\"line\"></div><div class=\"line\">　　<span class=\"number\">3</span>）接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法；</div><div class=\"line\"></div><div class=\"line\">　　<span class=\"number\">4</span>）一个类只能继承一个抽象类，而一个类却可以实现多个接口。</div></pre></td></tr></table></figure></p>\n<p>8，自动装箱与拆箱<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">基本数据类型的自动装箱(autoboxing)、拆箱(unboxing)是自J2SE <span class=\"number\">5.0</span>开始提供的功能。 </div><div class=\"line\">基本数据与对象的区别</div><div class=\"line\">如：int t = <span class=\"number\">1</span>；     t.  后面是没有方法滴。</div><div class=\"line\"></div><div class=\"line\">    Integer t =<span class=\"number\">1</span>； t.  后面就有很多方法可让你调用了。</div><div class=\"line\"></div><div class=\"line\">Integer i = <span class=\"number\">100</span>; // 自动装箱</div><div class=\"line\">相当于编译器自动为您作以下的语法编译：Integer i = Integer.valueOf(<span class=\"number\">100</span>);</div><div class=\"line\">Integer i = <span class=\"number\">10</span>; //装箱 </div><div class=\"line\">int t = i; //拆箱，实际上执行了 int t = i.intValue();    </div><div class=\"line\"></div><div class=\"line\">注意：integer值得默认大小是<span class=\"bullet\">-127</span><span class=\"bullet\">-128</span></div></pre></td></tr></table></figure></p>\n<p>7，泛型<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">泛型是Java SE <span class=\"number\">1.5</span>的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数,</div><div class=\"line\">类型擦除可以简单的理解为将泛型java代码转换为普通java代码，只不过编译器更直接点，</div><div class=\"line\">将泛型java代码直接转换成普通java字节码。</div><div class=\"line\">     类型擦除的主要过程如下：</div><div class=\"line\">     <span class=\"number\">1.</span>将所有的泛型参数用其最左边界（最顶级的父类型）类型替换。</div><div class=\"line\">     <span class=\"number\">2.</span>移除所有的类型参数。</div></pre></td></tr></table></figure></p>\n<p>8,Java中的集合类及其关系图<br>关系图<br><img src=\"/2016/08/01/java-基础题/java_collection.jpg\" alt=\"微服务架构图\" title=\"微服务架构图\"><br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">　上述类图中，实线边框的是实现类，比如ArrayList，LinkedList，HashMap等，</div><div class=\"line\">  折线边框的是抽象类，比如AbstractCollection，AbstractList，AbstractMap等，</div><div class=\"line\">  而点线边框的是接口，比如Collection，Iterator，List等。</div><div class=\"line\">  \t　\t\t是否有序\t是否允许元素重复</div><div class=\"line\">Collection\t\t否\t\t是</div><div class=\"line\">List\t\t\t是\t\t是</div><div class=\"line\">Set\tAbstractSet\t否\t\t否</div><div class=\"line\">　\tHashSet    \t 否\t\t否</div><div class=\"line\">　\tTreeSet\t\t是\t\t否</div><div class=\"line\">Map\tAbstractMap\t否\t使用key-value来映射和存储数据，key必须唯一，value可以重复</div><div class=\"line\">　\tHashMap</div><div class=\"line\">　\tTreeMap\t\t是（用二叉排序树）</div></pre></td></tr></table></figure></p>\n<p>9，HashMap的实现原理<br>   见此链接<br>10，HashTable实现原理<br>   见此链接<br>11，HashMap与HashTable的区别<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一，继承不同。</div><div class=\"line\"></div><div class=\"line\">public class Hashtable extends Dictionary implements Map</div><div class=\"line\">public class HashMap  extends AbstractMap implements Map</div><div class=\"line\">第二</div><div class=\"line\"></div><div class=\"line\">Hashtable 中的方法是同步的，而HashMap中的方法在缺省情况下是非同步的。在多线程并发的环境下，可以直接使用Hashtable，但是要使用HashMap的话就要自己增加同步处理了。</div><div class=\"line\"></div><div class=\"line\">第三</div><div class=\"line\"></div><div class=\"line\">Hashtable中，key和value都不允许出现<span class=\"literal\">null</span>值。</div><div class=\"line\"></div><div class=\"line\">在HashMap中，<span class=\"literal\">null</span>可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为<span class=\"literal\">null</span>。当get()方法返回<span class=\"literal\">null</span>值时，即可以表示 HashMap中没有该键，也可以表示该键所对应的值为<span class=\"literal\">null</span>。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键， 而应该用containsKey()方法来判断。</div><div class=\"line\"></div><div class=\"line\">第四，两个遍历方式的内部实现上不同。</div><div class=\"line\"></div><div class=\"line\">Hashtable、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式 。</div><div class=\"line\"></div><div class=\"line\">第五</div><div class=\"line\"></div><div class=\"line\">哈希值的使用不同，HashTable直接使用对象的hashCode。而HashMap重新计算hash值。</div><div class=\"line\"></div><div class=\"line\">第六</div><div class=\"line\"></div><div class=\"line\">Hashtable和HashMap它们两个内部实现方式的数组的初始大小和扩容的方式。HashTable中hash数组默认大小是<span class=\"number\">11</span>，增加的方式是 old*<span class=\"number\">2</span>+<span class=\"number\">1</span>。HashMap中hash数组的默认大小是<span class=\"number\">16</span>，而且一定是<span class=\"number\">2</span>的指数。</div></pre></td></tr></table></figure></p>\n<p>12，ArrayList和vector区别<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>）  Vector的方法都是同步的(Synchronized),是线程安全的(thread-safe)，而ArrayList的方法不是，由于线程的同步必然要影响性能，因此,ArrayList的性能比Vector好。 </div><div class=\"line\"><span class=\"number\">2</span>） 当Vector或ArrayList中的元素超过它的初始大小时,Vector会将它的容量翻倍,而ArrayList只增加<span class=\"number\">50</span>%的大小，这样,ArrayList就有利于节约内存空间。</div></pre></td></tr></table></figure></p>\n<p>13,ArrayList和LinkedList区别及使用场景<br>区别<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArryList初始化时，elementData数组大小默认为<span class=\"number\">10</span>；</div><div class=\"line\">每次add（）时，先调用ensureCapacity（）保证数组不会溢出，如果此时已满，会扩展为数组length的<span class=\"number\">1.5</span>倍+<span class=\"number\">1</span>，</div><div class=\"line\">然后用array.copy的方法，将原数组拷贝到新的数组中；线程不安全。</div><div class=\"line\"></div><div class=\"line\">LinkedList是基于双链表实现的：</div><div class=\"line\">使用header的优点是：在任何一个条目（包括第一个和最后一个）都有一个前置条目和一个后置条目，</div><div class=\"line\">因此在LinkedList对象的开始或者末尾进行插入操作没有特殊的地方；</div></pre></td></tr></table></figure></p>\n<p>使用场景<br>   （1）查询操作多，ArrayList对象要远优于LinkedList对象；</p>\n<p>   （2）修改和删除操作多，LinkedList对象要远优于ArrayList对象；</p>\n"},{"title":"spring AOP 注解开发","url":"https://yangzhiw.github.io/2016/07/28/spring-AOP-注解开发/","content":"<h1 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h1><p>AOP主要包含了通知、切点和连接点等术语，介绍如下:</p>\n<h2 id=\"通知（advice）\"><a href=\"#通知（advice）\" class=\"headerlink\" title=\"通知（advice）\"></a>通知（advice）</h2><p>通知定义了切面是什么以及何时调用，何时调用包含以下几种<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Before 在方法被调用之前调用通知</div><div class=\"line\">After 在方法完成之后调用通知，无论方法执行是否成功</div><div class=\"line\">After-returning 在方法成功执行之后调用通知</div><div class=\"line\">After-throwing 在方法抛出异常后调用通知</div><div class=\"line\">Around 通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为</div></pre></td></tr></table></figure></p>\n<h2 id=\"切点-PointCut\"><a href=\"#切点-PointCut\" class=\"headerlink\" title=\"切点(PointCut)\"></a>切点(PointCut)</h2><p>通知定义了切面的什么和何时，切点定义了何处，切点的定义会匹配通知所要织入的一个或多个连接点，<br>我们通常使用明确的类的方法名称来指定这些切点，或是利用正则表达式定义匹配的类和方法名称来指定这些切点。</p>\n<h2 id=\"连接点-JoinPoint\"><a href=\"#连接点-JoinPoint\" class=\"headerlink\" title=\"连接点(JoinPoint)\"></a>连接点(JoinPoint)</h2><p>连接点是在应用执行过程中能够插入切面的一个点，这个点可以是调用方法时，抛出异常时，甚至是修改一个字段时，<br>切面代码可以利用这些连接点插入到应用的正常流程中，并添加新的行为，如日志、安全、事务、缓存等。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">joinPoint.getSignature().getDeclaringTypeName() 可以获取到调用方法的类名（包括包名），</div><div class=\"line\">joinPoint.getSignature().getName()    可以获取方法名，</div><div class=\"line\">Arrays.toString(joinPoint.getArgs())   得到的是方法调用的参数列表，</div><div class=\"line\">joinPoint.proceed()   可以得到方法的返回结果</div></pre></td></tr></table></figure></p>\n<h1 id=\"2-注解开发\"><a href=\"#2-注解开发\" class=\"headerlink\" title=\"2.注解开发\"></a>2.注解开发</h1><p>声明一个切面，只需要在类名上添加@Aspect属性即可，具体的连接点，我们用@Pointcut和@Before、@After等标注。<br>在声明前 我们需要依赖配置pom<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;dependency<span class=\"string\">&gt;</span></div><div class=\"line\">    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.6.11&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.6.11&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>\n<p>例子<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.ganji.demo.service.aspect;</div><div class=\"line\"></div><div class=\"line\">import org.aspectj.lang.ProceedingJoinPoint;</div><div class=\"line\">import org.aspectj.lang.annotation.*;</div><div class=\"line\">import org.springframework.stereotype.Service;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by admin on <span class=\"number\">2015</span>/<span class=\"number\">9</span>/<span class=\"number\">2.</span></div><div class=\"line\"> */</div><div class=\"line\">@Aspect</div><div class=\"line\">@Service</div><div class=\"line\">public class XmlAopDemoUserLog &#123;</div><div class=\"line\"></div><div class=\"line\">// 配置切点 及要传的参数   </div><div class=\"line\">    @Pointcut(<span class=\"string\">\"execution(* com.ganji.demo.service.user.UserService.GetDemoUser(..)) &amp;&amp; args(id)\"</span>)</div><div class=\"line\">    public void pointCut(int id)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">// 配置连接点 方法开始执行时通知</div><div class=\"line\">    @Before(<span class=\"string\">\"pointCut(id)\"</span>)</div><div class=\"line\">    public void beforeLog(int id) &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"开始执行前置通知  日志记录:\"</span>+id);</div><div class=\"line\">    &#125;</div><div class=\"line\">//    方法执行完后通知</div><div class=\"line\">    @After(<span class=\"string\">\"pointCut(id)\"</span>)</div><div class=\"line\">    public void afterLog(int id) &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"开始执行后置通知 日志记录:\"</span>+id);</div><div class=\"line\">    &#125;</div><div class=\"line\">//    执行成功后通知</div><div class=\"line\">    @AfterReturning(<span class=\"string\">\"pointCut(id)\"</span>)</div><div class=\"line\">    public void afterReturningLog(int id) &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"方法成功执行后通知 日志记录:\"</span>+id);</div><div class=\"line\">    &#125;</div><div class=\"line\">//    抛出异常后通知</div><div class=\"line\">    @AfterThrowing(<span class=\"string\">\"pointCut(id)\"</span>)</div><div class=\"line\">    public void afterThrowingLog(int id) &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"方法抛出异常后执行通知 日志记录\"</span>+id);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">//    环绕通知</div><div class=\"line\">    @Around(<span class=\"string\">\"pointCut(id)\"</span>)</div><div class=\"line\">    public Object aroundLog(ProceedingJoinPoint joinpoint,int id) &#123;</div><div class=\"line\">        Object result = <span class=\"literal\">null</span>;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"环绕通知开始 日志记录\"</span>+id);</div><div class=\"line\">            long start = System.currentTimeMillis();</div><div class=\"line\"></div><div class=\"line\">            //有返回参数 则需返回值</div><div class=\"line\">            result =  joinpoint.proceed();</div><div class=\"line\"></div><div class=\"line\">            long end = System.currentTimeMillis();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"总共执行时长\"</span> + (end - start) + <span class=\"string\">\" 毫秒\"</span>);</div><div class=\"line\">            System.out.println(<span class=\"string\">\"环绕通知结束 日志记录\"</span>);</div><div class=\"line\">        &#125; catch (Throwable t) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"出现错误\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"Docker 应用","url":"https://yangzhiw.github.io/2016/07/27/Docker-应用/","content":"<h1 id=\"应用Docker部署\"><a href=\"#应用Docker部署\" class=\"headerlink\" title=\"应用Docker部署\"></a>应用Docker部署</h1><p>在项目的根目录下建立一个Dockerfile文件<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM maven:<span class=\"number\">3.3</span><span class=\"number\">.3</span>  </div><div class=\"line\">  </div><div class=\"line\">ADD pom.xml /tmp/build/  </div><div class=\"line\">RUN cd /tmp/build &amp;&amp; mvn -q dependency:resolve  </div><div class=\"line\">  </div><div class=\"line\">ADD src /tmp/build/src  </div><div class=\"line\">        <span class=\"comment\">#构建应用  </span></div><div class=\"line\">RUN cd /tmp/build &amp;&amp; mvn -q -DskipTests=<span class=\"literal\">true</span> package \\  </div><div class=\"line\">        <span class=\"comment\">#拷贝编译结果到指定目录  </span></div><div class=\"line\">        &amp;&amp; mv target/*.jar /app.jar \\  </div><div class=\"line\">        <span class=\"comment\">#清理编译痕迹  </span></div><div class=\"line\">        &amp;&amp; cd / &amp;&amp; rm -rf /tmp/build  </div><div class=\"line\">  </div><div class=\"line\">VOLUME /tmp  </div><div class=\"line\">EXPOSE <span class=\"number\">8080</span>  </div><div class=\"line\">ENTRYPOINT [<span class=\"string\">\"java\"</span>,<span class=\"string\">\"-Djava.security.egd=file:/dev/./urandom\"</span>,<span class=\"string\">\"-jar\"</span>,<span class=\"string\">\"/app.jar\"</span>]</div></pre></td></tr></table></figure></p>\n<p>因为 Spring Boot 框架打包的应用是一个包含依赖的 jar 文件，内嵌了 Tomcat 和 Jetty 支持，所以我们只需要使用包含 Java<br>的 Maven 镜像即可，不需要 Tomcat 镜像。<br>为了减少镜像大小，在执行 Maven 构建之后，清理了构建痕迹。<br>在 Dockerfile 文件的最后，使用 ENTRYPOINT 指令执行启动 Java 应用的操作。</p>\n<h1 id=\"构建-Docker-镜像\"><a href=\"#构建-Docker-镜像\" class=\"headerlink\" title=\"构建 Docker 镜像\"></a>构建 Docker 镜像</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t docker-demo-spring-boot .   ／／注意后面的 . 表示当前路径下</div></pre></td></tr></table></figure>\n<h1 id=\"从镜像启动容器\"><a href=\"#从镜像启动容器\" class=\"headerlink\" title=\"从镜像启动容器\"></a>从镜像启动容器</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -d -p <span class=\"number\">8080</span>:<span class=\"number\">8080</span> docker-demo-spring-boot</div></pre></td></tr></table></figure>\n<h1 id=\"完成部署：\"><a href=\"#完成部署：\" class=\"headerlink\" title=\"完成部署：\"></a>完成部署：</h1><p>URL访问，可通过docker ip查看应用的虚拟地址。</p>\n<h1 id=\"Docker-Compose编排\"><a href=\"#Docker-Compose编排\" class=\"headerlink\" title=\"Docker Compose编排\"></a>Docker Compose编排</h1><p>Docker Compose是用于定义和组装运行多容器分布式应用的工具，<br>它提供一个简单的基于YAML语言的docker－compose.yml配置文件。 通常，我们使用docker定义和运行复杂的应用，<br>使用docker compose，在一个文件里定义多容器应用的启动顺序，起到服务编排的作用。</p>\n<h2 id=\"编写-docker-compose-yaml-文件\"><a href=\"#编写-docker-compose-yaml-文件\" class=\"headerlink\" title=\"编写 docker-compose.yaml 文件\"></a>编写 docker-compose.yaml 文件</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">web:</span>  </div><div class=\"line\"><span class=\"attr\">  build:</span> .  </div><div class=\"line\"><span class=\"attr\">  ports:</span>  </div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">\"8080:8080\"</span>  </div><div class=\"line\"><span class=\"attr\">  links:</span>  </div><div class=\"line\"><span class=\"attr\">    - mongodb:</span>mongodb  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"attr\">mongodb:</span>  </div><div class=\"line\"><span class=\"attr\">  image:</span> daocloud.io/library/mongo:latest  </div><div class=\"line\"><span class=\"attr\">  ports:</span>  </div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">\"27017:27017\"</span></div></pre></td></tr></table></figure>\n<p>这里以MongoDB数据库提供服务的demo，在该文件中，我们定于了两个服务：</p>\n<pre><code>基于我们应用构建的 docker-demo-java-mongo 镜像，用来提供 Web 服务\n基于 DaoCloud 提供的 MongoDB 镜像，提供存储服务\n通过 links 为 web 关联 mongo 服务\n</code></pre><h2 id=\"启动-Docker-Compose\"><a href=\"#启动-Docker-Compose\" class=\"headerlink\" title=\"启动 Docker Compose\"></a>启动 Docker Compose</h2><pre><code class=\"yaml\">docker-compose up\n</code></pre>\n"},{"title":"spring Boot Cloud2","url":"https://yangzhiw.github.io/2016/07/27/spring-Boot-Cloud2/","content":"<h1 id=\"Spring-Cloud介绍\"><a href=\"#Spring-Cloud介绍\" class=\"headerlink\" title=\"Spring Cloud介绍\"></a>Spring Cloud介绍</h1><p>Spring Cloud是一个基于Spring Boot实现的云应用开发工具，它为基于JVM的云应用开发中的配置管理、服务发现、断路器、<br>智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。</p>\n<h1 id=\"Spring-Cloud与Dubbo对比\"><a href=\"#Spring-Cloud与Dubbo对比\" class=\"headerlink\" title=\"Spring Cloud与Dubbo对比\"></a>Spring Cloud与Dubbo对比</h1><p>它们两都具备分布式服务治理相关的功能，都能够提供服务注册、发现、路由、负载均衡等。说到这，Dubbo的功能好像<br>也就这么多了，但是Spring Cloud是提供了一整套企业级分布式云应用的完美解决方案，能够结合Spring Boot，<br>Docker实现快速开发的目的，所以说Dubbo只有Spring Cloud的一部分RPC功能，而且也谈不上谁好谁坏。不过，<br>Dubbo项目现已停止了更新，淘宝内部由hsf替代dubbo，我想这会有更多人倾向Spring Cloud了。<br>从开发角度上说，Dubbo常与Spring、zookeeper结合，而且实现只是通过xml来配置服务地址、名称、端口，<br>代码的侵入性是很小的，相对Spring Cloud，它的实现需要类注解等，多少具有一定侵入性。</p>\n<h1 id=\"Spring-Cloud子项目\"><a href=\"#Spring-Cloud子项目\" class=\"headerlink\" title=\"Spring Cloud子项目\"></a>Spring Cloud子项目</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Spring Cloud包含了多个子项目（针对分布式系统中涉及的多个不同开源产品），之前在第一章节也介绍这些，</div><div class=\"line\">比如：Spring Cloud Config、Spring Cloud Netflix、Spring Cloud CloudFoundry、Spring Cloud AWS、</div><div class=\"line\">Spring Cloud Security、Spring Cloud Commons、Spring Cloud Zookeeper、Spring Cloud CLI等项目。</div></pre></td></tr></table></figure>\n<h2 id=\"配置服务\"><a href=\"#配置服务\" class=\"headerlink\" title=\"配置服务\"></a>配置服务</h2><p>Spring Cloud通过Netflix OSS的Eureka来实现服务发现，服务发现的主要目的是为了让每个服务之间可以互相通信。<br>Eureka Server为微服务的注册中心。谈到Spring Cloud Netflix，它是Spring Cloud的子项目之一，主要提供的模块包括：<br>服务发现（Eureka），断路器（Hystrix），智能路由（Zuul），客户端负载均衡（Ribbon）等。<br>Spring Cloud使用注解的方式提供了Eureka服务端（@EnableEurekaServer）和客户端（@EnableEurekaClient）。</p>\n<h2 id=\"路由网关\"><a href=\"#路由网关\" class=\"headerlink\" title=\"路由网关\"></a>路由网关</h2><p>路由网关的主要目的是为了让所有的微服务对外只有一个接口，我们只需访问一个网关地址，即可由网关将所有的请求代理<br>到不同的服务中。Spring Cloud是通过Zuul来实现的，支持自动路由映射到在Eureka Server上注册的服务。<br>Spring Cloud提供了注解@EnableZuulProxy来启用路由代理。</p>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>Spring Cloud提供了Ribbon和Feign作为客户端的负载均衡。在Spring Cloud下，使用Ribbon直接注入一个RestTemplate<br>对象即可，此RestTemplate已做好负载均衡的配置；而使用Feign只需定义个注解，有@FeignClient注解的接口，<br>然后使用@RequestMapping注解在方法上映射远程的REST服务，此方法也是做好了负载均衡配置。</p>\n<h2 id=\"路断器\"><a href=\"#路断器\" class=\"headerlink\" title=\"路断器\"></a>路断器</h2><p>断路器（Circuit Breaker）主要是为了解决当某个方法调用失败的时候，调用后备方法来替代失败的方法，<br>已达到容错／阻止级联错误的功能。Spring Cloud使用@EnableCircuitBreaker来启用断路器支持，<br>使用@HystrixCommand的fallbackMethod来指定后备方法。（@HystrixCommand(fallbackMethod=”fallbackOper”)）<br>Spring Cloud还提供了一个控制台来监控断路器的运行情况，通过@EnableHystrixDashboard注解开启。</p>\n<p>Spring Cloud依赖<br><img src=\"/2016/07/27/spring-Boot-Cloud2/spring_cloud.jpg\" alt=\"spring_cloud\" title=\"spring_cloud\"></p>\n"},{"title":"spring Boot Cloud 学习1","url":"https://yangzhiw.github.io/2016/07/27/spring-Boot-Cloud/","content":"<h1 id=\"Spring-简介\"><a href=\"#Spring-简介\" class=\"headerlink\" title=\"Spring 简介\"></a>Spring 简介</h1><img src=\"/2016/07/27/spring-Boot-Cloud/Spring.jpg\" alt=\"Spring Project\" title=\"Spring Project\">\n<p>Spring IO platform:用于系统部署，是可集成的，构建现代化应用的版本平台，具体来说当你使用maven dependency引入spring jar包时它就在工作了。</p>\n<p>Spring Boot:旨在简化创建产品级的 Spring 应用和服务，简化了配置文件，使用嵌入式web服务器，含有诸多开箱即用微服务功能，可以和spring cloud联合部署。</p>\n<p>Spring Framework:即通常所说的spring 框架，是一个开源的Java/Java EE全功能栈应用程序框架，其它spring项目如spring boot也依赖于此框架。</p>\n<p>Spring Cloud：微服务工具包，为开发者提供了在分布式系统的配置管理、服务发现、断路器、智能路由、微代理、控制总线等开发工具包。</p>\n<p>Spring XD：是一种运行时环境（服务器软件，非开发框架），组合spring技术，如spring batch、spring boot、spring data，采集大数据并处理。</p>\n<p>Spring Data：是一个数据访问及操作的工具包，封装了很多种数据及数据库的访问相关技术，包括：jdbc、Redis、MongoDB、Neo4j等。</p>\n<p>Spring Batch：批处理框架，或说是批量任务执行管理器，功能包括任务调度、日志记录/跟踪等。</p>\n<p>Spring Security：是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。</p>\n<p>Spring Integration：面向企业应用集成（EAI/ESB）的编程框架，支持的通信方式包括HTTP、FTP、TCP/UDP、JMS、RabbitMQ、Email等。</p>\n<p>Spring Social：一组工具包，一组连接社交服务API，如Twitter、Facebook、LinkedIn、GitHub等，有几十个。</p>\n<p>Spring AMQP：消息队列操作的工具包，主要是封装了RabbitMQ的操作。</p>\n<p>Spring HATEOAS：是一个用于支持实现超文本驱动的 REST Web 服务的开发库。</p>\n<p>Spring Mobile：是Spring MVC的扩展，用来简化手机上的Web应用开发。</p>\n<p>Spring for Android：是Spring框架的一个扩展，其主要目的在乎简化Android本地应用的开发，提供RestTemplate来访问Rest服务。</p>\n<p>Spring Web Flow：目标是成为管理Web应用页面流程的最佳方案，将页面跳转流程单独管理，并可配置。</p>\n<p>Spring LDAP：是一个用于操作LDAP的Java工具包，基于Spring的JdbcTemplate模式，简化LDAP访问。</p>\n<p>Spring Session：session管理的开发工具包，让你可以把session保存到redis等，进行集群化session管理。</p>\n<p>Spring Web Services：是基于Spring的Web服务框架，提供SOAP服务开发，允许通过多种方式创建Web服务。</p>\n<p>Spring Shell：提供交互式的Shell可让你使用简单的基于Spring的编程模型来开发命令，比如Spring Roo命令。</p>\n<p>Spring Roo：是一种Spring开发的辅助工具，使用命令行操作来生成自动化项目，操作非常类似于Rails。</p>\n<p>Spring Scala：为Scala语言编程提供的spring框架的封装（新的编程语言，Java平台的Scala于2003年底/2004年初发布）。</p>\n<p>Spring BlazeDS Integration：一个开发RIA工具包，可以集成Adobe Flex、BlazeDS、Spring以及Java技术创建RIA。</p>\n<p>Spring Loaded：用于实现java程序和web应用的热部署的开源工具。</p>\n<p>Spring REST Shell：可以调用Rest服务的命令行工具，敲命令行操作Rest服务。</p>\n<h1 id=\"Spring-Cloud-项目\"><a href=\"#Spring-Cloud-项目\" class=\"headerlink\" title=\"Spring Cloud 项目\"></a>Spring Cloud 项目</h1><p>目前来说spring主要集中于spring boot（用于开发微服务）和spring cloud相关框架的开发，我们从几张图着手理解，然后再具体介绍</p>\n<img src=\"/2016/07/27/spring-Boot-Cloud/spring_cloud.jpg\" alt=\"微服务架构图\" title=\"微服务架构图\">\n<img src=\"/2016/07/27/spring-Boot-Cloud/cloud.jpg\" alt=\"微服务架构运行图\" title=\"微服务架构运行图\">\n<p>spring cloud子项目包括：</p>\n<p>Spring Cloud Config：配置管理开发工具包，可以让你把配置放到远程服务器，目前支持本地存储、Git以及Subversion。</p>\n<p>Spring Cloud Bus：事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。</p>\n<p>Spring Cloud Netflix：针对多种Netflix组件提供的开发工具包，其中包括Eureka、Hystrix、Zuul、Archaius等。</p>\n<p>Netflix Eureka：云端负载均衡，一个基于 REST 的服务，用于定位服务，以实现云端的负载均衡和中间层服务器的故障转移。</p>\n<p>Netflix Hystrix：容错管理工具，旨在通过控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。</p>\n<p>Netflix Zuul：边缘服务工具，是提供动态路由，监控，弹性，安全等的边缘服务。</p>\n<p>Netflix Archaius：配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。</p>\n<p>Spring Cloud for Cloud Foundry：通过Oauth2协议绑定服务到CloudFoundry，CloudFoundry是VMware推出的开源PaaS云平台。</p>\n<p>Spring Cloud Sleuth：日志收集工具包，封装了Dapper,Zipkin和HTrace操作。</p>\n<p>Spring Cloud Data Flow：大数据操作工具，通过命令行方式操作数据流。</p>\n<p>Spring Cloud Security：安全工具包，为你的应用程序添加安全控制，主要是指OAuth2。</p>\n<p>Spring Cloud Consul：封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。</p>\n<p>Spring Cloud Zookeeper：操作Zookeeper的工具包，用于使用zookeeper方式的服务注册和发现。</p>\n<p>Spring Cloud Stream：数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。</p>\n<p>Spring Cloud CLI：基于 Spring Boot CLI，可以让你以命令行方式快速建立云组件。</p>\n"},{"title":"markDown 的使用","url":"https://yangzhiw.github.io/2016/07/22/markDown/","content":"<h1 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 一级标题</span></div><div class=\"line\"><span class=\"comment\">## 二级标题</span></div><div class=\"line\">依次类推</div></pre></td></tr></table></figure>\n<h1 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，</div><div class=\"line\">有序列表则直接在文字前加 <span class=\"number\">1.</span> <span class=\"number\">2.</span> <span class=\"number\">3.</span> 符号要和文字之间加上一个字符的空格。</div></pre></td></tr></table></figure>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">只需要在文本前加入 &gt; 这种尖括号（大于号）即可</div></pre></td></tr></table></figure>\n<h1 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">插入链接与插入图片的语法很像，区别在一个 !号</div></pre></td></tr></table></figure>\n<h1 id=\"粗体与斜体\"><a href=\"#粗体与斜体\" class=\"headerlink\" title=\"粗体与斜体\"></a>粗体与斜体</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Markdown 的粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，</div><div class=\"line\">用一个 * 包含一段文本就是斜体的语法。</div></pre></td></tr></table></figure>\n<p><strong>我只粗体</strong>，<em>我是斜体</em>。</p>\n<h1 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h1><p>表格是我觉得 Markdown 比较累人的地方，例子如下：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">| Tables        | Are           | Cool  <span class=\"string\">|</span></div><div class=\"line\">| ------------- |:-------------:| -----:|</div><div class=\"line\">| col 3 is      | right-aligned | $1600 |</div><div class=\"line\">| col 2 is      | centered      |   $12 |</div><div class=\"line\">| zebra stripes | are neat      |    $1 |</div></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th>Tables</th>\n<th style=\"text-align:center\">Are</th>\n<th style=\"text-align:right\">Cool</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>col 3 is</td>\n<td style=\"text-align:center\">right-aligned</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td>col 2 is</td>\n<td style=\"text-align:center\">centered</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td>zebra stripes</td>\n<td style=\"text-align:center\">are neat</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">分割线的语法只需要另起一行，连续输入三个星号 *** 即可。</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"代码框\"><a href=\"#代码框\" class=\"headerlink\" title=\"代码框\"></a>代码框</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown 下实现也非常简单，</div><div class=\"line\">只需要用两个 ` 把中间的代码包裹起来.</div><div class=\"line\"></div><div class=\"line\">如 `System.out.println()`</div></pre></td></tr></table></figure>\n<p><code>System.out.println()</code></p>\n"},{"title":"redis集群搭建","url":"https://yangzhiw.github.io/2016/07/22/redis-cluster/","content":"<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">搭建的是一个<span class=\"number\">1</span>主<span class=\"number\">3</span>从的redis+<span class=\"number\">3</span>个哨兵集群的环境，由于是在一台物理机上，所有我们用端口区分。</div><div class=\"line\">物理机IP：<span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.12</span></div><div class=\"line\">主节点master端口：<span class=\"number\">6301</span></div><div class=\"line\">从节点slave1端口：<span class=\"number\">6315</span></div><div class=\"line\">从节点slave2端口：<span class=\"number\">6316</span></div><div class=\"line\">从节点slave3端口：<span class=\"number\">6317</span></div><div class=\"line\">哨兵sentinel1端口：<span class=\"number\">26301</span></div><div class=\"line\">哨兵sentinel2端口：<span class=\"number\">26302</span></div><div class=\"line\">哨兵sentinel3端口：<span class=\"number\">26303</span></div></pre></td></tr></table></figure>\n<h1 id=\"下载redis-amp-amp-复制\"><a href=\"#下载redis-amp-amp-复制\" class=\"headerlink\" title=\"下载redis &amp;&amp; 复制\"></a>下载redis &amp;&amp; 复制</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">下载redis后然后解压，</div><div class=\"line\">复制 </div><div class=\"line\">cp redis-benchmark redis-cli redis-server redis-sentinel /usr/bin/ <span class=\"comment\">#这个倒是很有用，这样就不用再执行时加上./了，而且可以在任何地方执行</span></div></pre></td></tr></table></figure>\n<h1 id=\"设置内存分配策略（可选，根据服务器的实际情况进行设置）\"><a href=\"#设置内存分配策略（可选，根据服务器的实际情况进行设置）\" class=\"headerlink\" title=\"设置内存分配策略（可选，根据服务器的实际情况进行设置）\"></a>设置内存分配策略（可选，根据服务器的实际情况进行设置）</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">/proc/sys/vm/overcommit_memory</div><div class=\"line\">可选值：<span class=\"number\">0</span>、<span class=\"number\">1</span>、<span class=\"number\">2</span>。</div><div class=\"line\"><span class=\"number\">0</span>， 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；</div><div class=\"line\">    否则，内存申请失败，并把错误返回给应用进程。</div><div class=\"line\"><span class=\"number\">1</span>， 表示内核允许分配所有的物理内存，而不管当前的内存状态如何。</div><div class=\"line\"><span class=\"number\">2</span>， 表示内核允许分配超过所有物理内存和交换空间总和的内存</div></pre></td></tr></table></figure>\n<h1 id=\"开启redis端口，修改防火墙配置文件\"><a href=\"#开启redis端口，修改防火墙配置文件\" class=\"headerlink\" title=\"开启redis端口，修改防火墙配置文件\"></a>开启redis端口，修改防火墙配置文件</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">    vi /etc/sysconfig/iptables </div><div class=\"line\">加入端口配置</div><div class=\"line\"><span class=\"bullet\">    -</span>A RH-Firewall<span class=\"bullet\">-1</span>-INPUT -m state --state NEW -m tcp -p tcp --dport <span class=\"number\">6379</span> -j ACCEPT </div><div class=\"line\">重新加载规则</div><div class=\"line\">    service iptables restart</div></pre></td></tr></table></figure>\n<h1 id=\"配置redis-config文件\"><a href=\"#配置redis-config文件\" class=\"headerlink\" title=\"配置redis.config文件\"></a>配置redis.config文件</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>、主节点master的配置文件redis_master_6301.config：</div><div class=\"line\"><span class=\"comment\"># Redis configuration file example</span></div><div class=\"line\"><span class=\"comment\">################################## INCLUDES ###################################</span></div><div class=\"line\"><span class=\"comment\"># include /path/to/local.conf</span></div><div class=\"line\"><span class=\"comment\"># include /path/to/other.conf</span></div><div class=\"line\"><span class=\"comment\">################################ GENERAL  #####################################</span></div><div class=\"line\">daemonize <span class=\"literal\">yes</span></div><div class=\"line\">pidfile ./run/redis_slaver1_6315.pid</div><div class=\"line\">port <span class=\"number\">6301</span></div><div class=\"line\">tcp-backlog <span class=\"number\">511</span></div><div class=\"line\"><span class=\"comment\"># bind 192.168.1.100 10.0.0.1</span></div><div class=\"line\"><span class=\"comment\"># bind 127.0.0.1</span></div><div class=\"line\"><span class=\"comment\"># unixsocket /tmp/redis.sock</span></div><div class=\"line\"><span class=\"comment\"># unixsocketperm 700</span></div><div class=\"line\">timeout <span class=\"number\">0</span></div><div class=\"line\">tcp-keepalive <span class=\"number\">0</span></div><div class=\"line\">loglevel notice</div><div class=\"line\">logfile <span class=\"string\">\"./run/logs/log_master_6301.log\"</span></div><div class=\"line\">databases <span class=\"number\">16</span></div><div class=\"line\"><span class=\"comment\">################################ SNAPSHOTTING  ################################</span></div><div class=\"line\">save <span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"comment\"># save 900 1</span></div><div class=\"line\"><span class=\"comment\"># save 300 10</span></div><div class=\"line\"><span class=\"comment\"># save 60 10000</span></div><div class=\"line\">stop-writes-on-bgsave-error <span class=\"literal\">yes</span></div><div class=\"line\">rdbcompression <span class=\"literal\">yes</span></div><div class=\"line\">rdbchecksum <span class=\"literal\">no</span></div><div class=\"line\">dbfilename dump_6301.rdb</div><div class=\"line\">dir ./run/data</div><div class=\"line\"><span class=\"comment\">################################# REPLICATION #################################</span></div><div class=\"line\">slave-serve-stale-data <span class=\"literal\">yes</span></div><div class=\"line\">slave-read-only <span class=\"literal\">yes</span></div><div class=\"line\">repl-diskless-sync <span class=\"literal\">no</span></div><div class=\"line\">repl-diskless-sync-delay <span class=\"number\">5</span></div><div class=\"line\"><span class=\"comment\"># repl-ping-slave-period 10</span></div><div class=\"line\"><span class=\"comment\"># repl-timeout 60</span></div><div class=\"line\">repl-disable-tcp-nodelay <span class=\"literal\">no</span></div><div class=\"line\"><span class=\"comment\"># repl-backlog-size 1mb</span></div><div class=\"line\"><span class=\"comment\"># repl-backlog-ttl 3600</span></div><div class=\"line\">slave-priority <span class=\"number\">100</span></div><div class=\"line\"><span class=\"comment\"># min-slaves-to-write 3</span></div><div class=\"line\"><span class=\"comment\"># min-slaves-max-lag 10</span></div><div class=\"line\"><span class=\"comment\">################################## SECURITY ###################################</span></div><div class=\"line\"><span class=\"comment\"># rename-command CONFIG \"\"</span></div><div class=\"line\"><span class=\"comment\">################################### LIMITS ####################################</span></div><div class=\"line\"><span class=\"comment\"># maxclients 10000</span></div><div class=\"line\"><span class=\"comment\"># maxmemory &lt;bytes&gt;</span></div><div class=\"line\"><span class=\"comment\"># maxmemory-policy noeviction</span></div><div class=\"line\"><span class=\"comment\"># maxmemory-samples 5</span></div><div class=\"line\"><span class=\"comment\">############################## APPEND ONLY MODE ###############################</span></div><div class=\"line\">appendonly <span class=\"literal\">no</span></div><div class=\"line\">appendfilename <span class=\"string\">\"appendonly_6301.aof\"</span></div><div class=\"line\">appendfsync <span class=\"literal\">no</span></div><div class=\"line\"><span class=\"literal\">no</span>-appendfsync-on-rewrite <span class=\"literal\">no</span></div><div class=\"line\">auto-aof-rewrite-percentage <span class=\"number\">100</span></div><div class=\"line\">auto-aof-rewrite-min-size <span class=\"number\">64</span>mb</div><div class=\"line\">aof-load-truncated <span class=\"literal\">yes</span></div><div class=\"line\"><span class=\"comment\">################################ LUA SCRIPTING  ###############################</span></div><div class=\"line\">lua-time-limit <span class=\"number\">5000</span></div><div class=\"line\"><span class=\"comment\">################################ REDIS CLUSTER  ###############################</span></div><div class=\"line\"><span class=\"comment\"># cluster-enabled yes</span></div><div class=\"line\"><span class=\"comment\"># cluster-config-file nodes-6379.conf</span></div><div class=\"line\"><span class=\"comment\"># cluster-node-timeout 15000</span></div><div class=\"line\"><span class=\"comment\"># cluster-slave-validity-factor 10</span></div><div class=\"line\"><span class=\"comment\"># cluster-migration-barrier 1</span></div><div class=\"line\"><span class=\"comment\"># cluster-require-full-coverage yes</span></div><div class=\"line\"><span class=\"comment\">################################## SLOW LOG ###################################</span></div><div class=\"line\">slowlog-log-slower-than <span class=\"number\">10000</span></div><div class=\"line\">slowlog-max-len <span class=\"number\">128</span></div><div class=\"line\"><span class=\"comment\">################################ LATENCY MONITOR ##############################</span></div><div class=\"line\">latency-monitor-threshold <span class=\"number\">0</span></div><div class=\"line\"><span class=\"comment\">############################# EVENT NOTIFICATION ##############################</span></div><div class=\"line\">notify-keyspace-events <span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"comment\">############################### ADVANCED CONFIG ###############################</span></div><div class=\"line\">hash-max-ziplist-entries <span class=\"number\">512</span></div><div class=\"line\">hash-max-ziplist-value <span class=\"number\">64</span></div><div class=\"line\">list-max-ziplist-entries <span class=\"number\">512</span></div><div class=\"line\">list-max-ziplist-value <span class=\"number\">64</span></div><div class=\"line\">set-max-intset-entries <span class=\"number\">512</span></div><div class=\"line\">zset-max-ziplist-entries <span class=\"number\">128</span></div><div class=\"line\">zset-max-ziplist-value <span class=\"number\">64</span></div><div class=\"line\">hll-sparse-max-bytes <span class=\"number\">3000</span></div><div class=\"line\">activerehashing <span class=\"literal\">yes</span></div><div class=\"line\">client-output-buffer-limit normal <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span></div><div class=\"line\">client-output-buffer-limit slave <span class=\"number\">256</span>mb <span class=\"number\">64</span>mb <span class=\"number\">60</span></div><div class=\"line\">client-output-buffer-limit pubsub <span class=\"number\">32</span>mb <span class=\"number\">8</span>mb <span class=\"number\">60</span></div><div class=\"line\">hz <span class=\"number\">10</span></div><div class=\"line\">aof-rewrite-incremental-fsync <span class=\"literal\">yes</span></div><div class=\"line\"><span class=\"number\">2</span>、从节点slave1的配置文件redis_slave_6315.config：</div><div class=\"line\"><span class=\"comment\"># Redis configuration file example</span></div><div class=\"line\"><span class=\"comment\">################################## INCLUDES ###################################</span></div><div class=\"line\"><span class=\"comment\"># include /path/to/local.conf</span></div><div class=\"line\"><span class=\"comment\"># include /path/to/other.conf</span></div><div class=\"line\"><span class=\"comment\">################################ GENERAL  #####################################</span></div><div class=\"line\">daemonize <span class=\"literal\">yes</span></div><div class=\"line\">pidfile ./run/redis_slaver1_6315.pid</div><div class=\"line\">port <span class=\"number\">6315</span></div><div class=\"line\">tcp-backlog <span class=\"number\">511</span></div><div class=\"line\"><span class=\"comment\"># bind 192.168.1.100 10.0.0.1</span></div><div class=\"line\"><span class=\"comment\"># bind 127.0.0.1</span></div><div class=\"line\"><span class=\"comment\"># unixsocket /tmp/redis.sock</span></div><div class=\"line\"><span class=\"comment\"># unixsocketperm 700</span></div><div class=\"line\">timeout <span class=\"number\">0</span></div><div class=\"line\">tcp-keepalive <span class=\"number\">0</span></div><div class=\"line\">loglevel notice</div><div class=\"line\">logfile <span class=\"string\">\"./run/logs/log_slaver1_6315.log\"</span></div><div class=\"line\">databases <span class=\"number\">16</span></div><div class=\"line\"><span class=\"comment\">################################ SNAPSHOTTING  ################################</span></div><div class=\"line\">save <span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"comment\"># save 900 1</span></div><div class=\"line\"><span class=\"comment\"># save 300 10</span></div><div class=\"line\"><span class=\"comment\"># save 60 10000</span></div><div class=\"line\">stop-writes-on-bgsave-error <span class=\"literal\">yes</span></div><div class=\"line\">rdbcompression <span class=\"literal\">yes</span></div><div class=\"line\">rdbchecksum <span class=\"literal\">no</span></div><div class=\"line\">dbfilename dump_6315.rdb</div><div class=\"line\">dir ./run/data</div><div class=\"line\"><span class=\"comment\">################################# REPLICATION #################################</span></div><div class=\"line\">slaveof <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.12</span> <span class=\"number\">6301</span></div><div class=\"line\">slave-serve-stale-data <span class=\"literal\">yes</span></div><div class=\"line\">slave-read-only <span class=\"literal\">yes</span></div><div class=\"line\">repl-diskless-sync <span class=\"literal\">no</span></div><div class=\"line\">repl-diskless-sync-delay <span class=\"number\">5</span></div><div class=\"line\"><span class=\"comment\"># repl-ping-slave-period 10</span></div><div class=\"line\"><span class=\"comment\"># repl-timeout 60</span></div><div class=\"line\">repl-disable-tcp-nodelay <span class=\"literal\">no</span></div><div class=\"line\"><span class=\"comment\"># repl-backlog-size 1mb</span></div><div class=\"line\"><span class=\"comment\"># repl-backlog-ttl 3600</span></div><div class=\"line\">slave-priority <span class=\"number\">80</span></div><div class=\"line\"><span class=\"comment\"># min-slaves-to-write 3</span></div><div class=\"line\"><span class=\"comment\"># min-slaves-max-lag 10</span></div><div class=\"line\"><span class=\"comment\">################################## SECURITY ###################################</span></div><div class=\"line\"><span class=\"comment\"># rename-command CONFIG \"\"</span></div><div class=\"line\"><span class=\"comment\">################################### LIMITS ####################################</span></div><div class=\"line\"><span class=\"comment\"># maxclients 10000</span></div><div class=\"line\"><span class=\"comment\"># maxmemory &lt;bytes&gt;</span></div><div class=\"line\"><span class=\"comment\"># maxmemory-policy noeviction</span></div><div class=\"line\"><span class=\"comment\"># maxmemory-samples 5</span></div><div class=\"line\"><span class=\"comment\">############################## APPEND ONLY MODE ###############################</span></div><div class=\"line\">appendonly <span class=\"literal\">no</span></div><div class=\"line\">appendfilename <span class=\"string\">\"appendonly_6315.aof\"</span></div><div class=\"line\">appendfsync <span class=\"literal\">no</span></div><div class=\"line\"><span class=\"literal\">no</span>-appendfsync-on-rewrite <span class=\"literal\">no</span></div><div class=\"line\">auto-aof-rewrite-percentage <span class=\"number\">100</span></div><div class=\"line\">auto-aof-rewrite-min-size <span class=\"number\">64</span>mb</div><div class=\"line\">aof-load-truncated <span class=\"literal\">yes</span></div><div class=\"line\"><span class=\"comment\">################################ LUA SCRIPTING  ###############################</span></div><div class=\"line\">lua-time-limit <span class=\"number\">5000</span></div><div class=\"line\"><span class=\"comment\">################################ REDIS CLUSTER  ###############################</span></div><div class=\"line\"><span class=\"comment\"># cluster-enabled yes</span></div><div class=\"line\"><span class=\"comment\"># cluster-config-file nodes-6379.conf</span></div><div class=\"line\"><span class=\"comment\"># cluster-node-timeout 15000</span></div><div class=\"line\"><span class=\"comment\"># cluster-slave-validity-factor 10</span></div><div class=\"line\"><span class=\"comment\"># cluster-migration-barrier 1</span></div><div class=\"line\"><span class=\"comment\"># cluster-require-full-coverage yes</span></div><div class=\"line\"><span class=\"comment\">################################## SLOW LOG ###################################</span></div><div class=\"line\">slowlog-log-slower-than <span class=\"number\">10000</span></div><div class=\"line\">slowlog-max-len <span class=\"number\">128</span></div><div class=\"line\"><span class=\"comment\">################################ LATENCY MONITOR ##############################</span></div><div class=\"line\">latency-monitor-threshold <span class=\"number\">0</span></div><div class=\"line\"><span class=\"comment\">############################# EVENT NOTIFICATION ##############################</span></div><div class=\"line\">notify-keyspace-events <span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"comment\">############################### ADVANCED CONFIG ###############################</span></div><div class=\"line\">hash-max-ziplist-entries <span class=\"number\">512</span></div><div class=\"line\">hash-max-ziplist-value <span class=\"number\">64</span></div><div class=\"line\">list-max-ziplist-entries <span class=\"number\">512</span></div><div class=\"line\">list-max-ziplist-value <span class=\"number\">64</span></div><div class=\"line\">set-max-intset-entries <span class=\"number\">512</span></div><div class=\"line\">zset-max-ziplist-entries <span class=\"number\">128</span></div><div class=\"line\">zset-max-ziplist-value <span class=\"number\">64</span></div><div class=\"line\">hll-sparse-max-bytes <span class=\"number\">3000</span></div><div class=\"line\">activerehashing <span class=\"literal\">yes</span></div><div class=\"line\">client-output-buffer-limit normal <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span></div><div class=\"line\">client-output-buffer-limit slave <span class=\"number\">256</span>mb <span class=\"number\">64</span>mb <span class=\"number\">60</span></div><div class=\"line\">client-output-buffer-limit pubsub <span class=\"number\">32</span>mb <span class=\"number\">8</span>mb <span class=\"number\">60</span></div><div class=\"line\">hz <span class=\"number\">10</span></div><div class=\"line\">aof-rewrite-incremental-fsync <span class=\"literal\">yes</span></div><div class=\"line\"><span class=\"number\">3</span>、从节点slave2的配置文件redis_slave_6316.config：</div><div class=\"line\">与上面slave1配置文件需要修改的地方</div><div class=\"line\">pidfile ./run/redis_slaver1_6316.pid</div><div class=\"line\">port <span class=\"number\">6316</span></div><div class=\"line\">logfile <span class=\"string\">\"./run/logs/log_slaver1_6316.log\"</span></div><div class=\"line\">dbfilename dump_6316.rdb</div><div class=\"line\">appendfilename <span class=\"string\">\"appendonly_6316.aof\"</span></div><div class=\"line\"><span class=\"number\">4</span>、从节点slave3的配置文件redis_slave_6317.config：</div><div class=\"line\">与上面slave1配置文件需要修改的地方</div><div class=\"line\">pidfile ./run/redis_slaver1_6317.pid</div><div class=\"line\">port <span class=\"number\">6317</span></div><div class=\"line\">logfile <span class=\"string\">\"./run/logs/log_slaver1_6317.log\"</span></div><div class=\"line\">dbfilename dump_6317.rdb</div><div class=\"line\">appendfilename <span class=\"string\">\"appendonly_6317.aof\"</span></div><div class=\"line\"><span class=\"number\">5</span>、哨兵sentinel1的配置文件sentinel_26301.config:</div><div class=\"line\"><span class=\"comment\"># Example sentinel.conf</span></div><div class=\"line\">port <span class=\"number\">26301</span></div><div class=\"line\"><span class=\"comment\"># sentinel announce-ip 1.2.3.4</span></div><div class=\"line\">dir ./run/tmp</div><div class=\"line\">sentinel monitor master1 <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.12</span> <span class=\"number\">6301</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"comment\"># sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span></div><div class=\"line\"><span class=\"comment\"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></div><div class=\"line\">sentinel down-after-milliseconds master1 <span class=\"number\">30000</span></div><div class=\"line\">sentinel parallel-syncs master1 <span class=\"number\">1</span></div><div class=\"line\">sentinel failover-timeout master1 <span class=\"number\">180000</span></div><div class=\"line\"><span class=\"comment\"># sentinel notification-script mymaster /var/redis/notify.sh</span></div><div class=\"line\"><span class=\"comment\"># sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span></div><div class=\"line\"><span class=\"comment\"># sentinel can-failover master1 yes</span></div><div class=\"line\">logfile <span class=\"string\">\"/redis-3.0.0/run/logs/sentinellog_m1_26301.log\"</span></div><div class=\"line\"><span class=\"number\">6</span>、哨兵sentinel2的配置文件sentinel_26302.config:</div><div class=\"line\"><span class=\"comment\"># Example sentinel.conf</span></div><div class=\"line\">port <span class=\"number\">26302</span></div><div class=\"line\"><span class=\"comment\"># sentinel announce-ip 1.2.3.4</span></div><div class=\"line\">dir ./run/tmp</div><div class=\"line\">sentinel monitor master1 <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.12</span> <span class=\"number\">6301</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"comment\"># sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span></div><div class=\"line\"><span class=\"comment\"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></div><div class=\"line\">sentinel down-after-milliseconds master1 <span class=\"number\">30000</span></div><div class=\"line\">sentinel parallel-syncs master1 <span class=\"number\">1</span></div><div class=\"line\">sentinel failover-timeout master1 <span class=\"number\">180000</span></div><div class=\"line\"><span class=\"comment\"># sentinel notification-script mymaster /var/redis/notify.sh</span></div><div class=\"line\"><span class=\"comment\"># sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span></div><div class=\"line\"><span class=\"comment\"># sentinel can-failover master1 yes</span></div><div class=\"line\">logfile <span class=\"string\">\"/redis-3.0.0/run/logs/sentinellog_m1_26302.log\"</span></div><div class=\"line\"><span class=\"number\">7</span>、哨兵sentinel3的配置文件sentinel_26303.config:</div><div class=\"line\"><span class=\"comment\"># Example sentinel.conf</span></div><div class=\"line\">port <span class=\"number\">26303</span></div><div class=\"line\"><span class=\"comment\"># sentinel announce-ip 1.2.3.4</span></div><div class=\"line\">dir ./run/tmp</div><div class=\"line\">sentinel monitor master1 <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.12</span> <span class=\"number\">6301</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"comment\"># sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span></div><div class=\"line\"><span class=\"comment\"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></div><div class=\"line\">sentinel down-after-milliseconds master1 <span class=\"number\">30000</span></div><div class=\"line\">sentinel parallel-syncs master1 <span class=\"number\">1</span></div><div class=\"line\">sentinel failover-timeout master1 <span class=\"number\">180000</span></div><div class=\"line\"><span class=\"comment\"># sentinel notification-script mymaster /var/redis/notify.sh</span></div><div class=\"line\"><span class=\"comment\"># sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span></div><div class=\"line\"><span class=\"comment\"># sentinel can-failover master1 yes</span></div><div class=\"line\">logfile <span class=\"string\">\"/redis-3.0.0/run/logs/sentinellog_m1_26303.log\"</span></div><div class=\"line\">````    </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 启动redis和哨兵服务</span></div><div class=\"line\">```yaml</div><div class=\"line\">注意：第一次要先启动redis主服务、从服务，然后才能启动哨兵服务</div><div class=\"line\"><span class=\"number\">1</span>、进入redis安装目录的根目录</div><div class=\"line\"><span class=\"number\">2</span>、启动redis主节点</div><div class=\"line\">[root@localhost redis<span class=\"bullet\">-3.0</span><span class=\"number\">.0</span>]<span class=\"comment\"># redis-server redis_master_6301.config &amp;</span></div><div class=\"line\"><span class=\"number\">3</span>、启动redis从节点</div><div class=\"line\">[root@localhost redis<span class=\"bullet\">-3.0</span><span class=\"number\">.0</span>]<span class=\"comment\"># redis-server redis_slave_6315.config &amp;</span></div><div class=\"line\">[root@localhost redis<span class=\"bullet\">-3.0</span><span class=\"number\">.0</span>]<span class=\"comment\"># redis-server redis_slave_6316.config &amp;</span></div><div class=\"line\">[root@localhost redis<span class=\"bullet\">-3.0</span><span class=\"number\">.0</span>]<span class=\"comment\"># redis-server redis_slave_6317.config &amp;</span></div><div class=\"line\"><span class=\"number\">4</span>、启动哨兵</div><div class=\"line\">[root@localhost redis<span class=\"bullet\">-3.0</span><span class=\"number\">.0</span>]<span class=\"comment\"># redis-sentinel sentinel_26301.config &amp;</span></div><div class=\"line\">[root@localhost redis<span class=\"bullet\">-3.0</span><span class=\"number\">.0</span>]<span class=\"comment\"># redis-sentinel sentinel_26302.config &amp;</span></div><div class=\"line\">[root@localhost redis<span class=\"bullet\">-3.0</span><span class=\"number\">.0</span>]<span class=\"comment\"># redis-sentinel sentinel_26303.config &amp;</span></div><div class=\"line\"></div><div class=\"line\">到目前为止整个redis+sentinel的安装搭建环境就算完成</div><div class=\"line\">`</div></pre></td></tr></table></figure>\n<h1 id=\"常用命名\"><a href=\"#常用命名\" class=\"headerlink\" title=\"常用命名\"></a>常用命名</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">进入redis的安装目录</div><div class=\"line\">启动redis-server：</div><div class=\"line\">./redis-server redis_6305.conf &amp;</div><div class=\"line\">启动redis-sentinel </div><div class=\"line\">./redis-sentinel sentinel_6301.config</div><div class=\"line\">./redis-server sentinel_6316.conf --sentinel &amp;</div><div class=\"line\">查看某个端口信息：</div><div class=\"line\">./redis-cli -p <span class=\"number\">6301</span> info</div><div class=\"line\">./redis-cli -p <span class=\"number\">6301</span> info Replication</div><div class=\"line\">./redis-cli -p <span class=\"number\">6301</span> info Sentinel</div><div class=\"line\">查看某个主机上的信息redis信息</div><div class=\"line\">./redis-cli -h <span class=\"number\">10.16</span><span class=\"number\">.41</span><span class=\"number\">.52</span> -p <span class=\"number\">6316</span> info</div><div class=\"line\">./redis-cli -h <span class=\"number\">10.16</span><span class=\"number\">.41</span><span class=\"number\">.52</span> -p <span class=\"number\">6316</span> info Replication</div><div class=\"line\">./redis-cli -h <span class=\"number\">10.16</span><span class=\"number\">.41</span><span class=\"number\">.52</span> -p <span class=\"number\">6316</span> info Sentinel</div><div class=\"line\">关闭本机redis服务</div><div class=\"line\">./redis-cli -p <span class=\"number\">6379</span> shutdown</div><div class=\"line\">关闭远程主机redis服务</div><div class=\"line\">./redis-cli -h <span class=\"number\">192.168</span><span class=\"number\">.9</span><span class=\"number\">.18</span> -p <span class=\"number\">6379</span> shutdown</div><div class=\"line\">客户端连接本机</div><div class=\"line\">./redis-cli -p <span class=\"number\">6301</span></div><div class=\"line\">客户端连接远程机</div><div class=\"line\">./redis-cli -h <span class=\"number\">10.16</span><span class=\"number\">.41</span><span class=\"number\">.53</span> -p <span class=\"number\">6301</span></div><div class=\"line\">切换连接</div><div class=\"line\">ssh app@<span class=\"number\">10.16</span><span class=\"number\">.41</span><span class=\"number\">.52</span></div><div class=\"line\"></div><div class=\"line\">使用命令关闭RDB持久化</div><div class=\"line\">`</div></pre></td></tr></table></figure>\n"},{"title":"logback 日志配置","url":"https://yangzhiw.github.io/2016/07/21/logback/","content":"<h1 id=\"写入文件配置\"><a href=\"#写入文件配置\" class=\"headerlink\" title=\"写入文件配置\"></a>写入文件配置</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;appender name=<span class=\"string\">\"FILE\"</span> class=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span><span class=\"string\">&gt;</span></div><div class=\"line\">    &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;</div><div class=\"line\">        &lt;fileNamePattern&gt;logFile.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt;</div><div class=\"line\">        &lt;maxHistory&gt;90&lt;/maxHistory&gt;</div><div class=\"line\">    &lt;/rollingPolicy&gt;</div><div class=\"line\">    &lt;encoder&gt;</div><div class=\"line\">        &lt;charset&gt;utf-8&lt;/charset&gt;</div><div class=\"line\">        &lt;Pattern&gt;%d %-5level [%thread] %logger&#123;0&#125;: %msg%n&lt;/Pattern&gt;</div><div class=\"line\">    &lt;/encoder&gt;</div><div class=\"line\">&lt;/appender&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"写入mysql数据库配置\"><a href=\"#写入mysql数据库配置\" class=\"headerlink\" title=\"写入mysql数据库配置\"></a>写入mysql数据库配置</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;appender name=<span class=\"string\">\"DB\"</span> class=<span class=\"string\">\"ch.qos.logback.classic.db.DBAppender\"</span><span class=\"string\">&gt;</span></div><div class=\"line\">     &lt;!--日志异步到数据库 --&gt;</div><div class=\"line\">     &lt;connectionSource class=\"ch.qos.logback.core.db.DataSourceConnectionSource\"&gt;</div><div class=\"line\">         &lt;!--连接池 --&gt;</div><div class=\"line\">         &lt;dataSource class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\"&gt;</div><div class=\"line\">             &lt;driverClassName&gt;com.mysql.jdbc.Driver&lt;/driverClassName&gt;</div><div class=\"line\">             &lt;url&gt;jdbc:mysql://localhost:3306/DB&lt;/url&gt;</div><div class=\"line\">             &lt;username &gt;root&lt;/username&gt;</div><div class=\"line\">             &lt;password&gt;root&lt;/password&gt;</div><div class=\"line\">         &lt;/dataSource&gt;</div><div class=\"line\">     &lt;/connectionSource&gt;</div><div class=\"line\"> &lt;/appender&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"写入控制台配置\"><a href=\"#写入控制台配置\" class=\"headerlink\" title=\"写入控制台配置\"></a>写入控制台配置</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;appender name=<span class=\"string\">\"STDOUT\"</span> class=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span><span class=\"string\">&gt;</span></div><div class=\"line\">     &lt;!-- 日志输出编码 --&gt;  </div><div class=\"line\">     &lt;Encoding&gt;UTF-8&lt;/Encoding&gt;   </div><div class=\"line\">      &lt;layout class=\"ch.qos.logback.classic.PatternLayout\"&gt;   </div><div class=\"line\">           &lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt; </div><div class=\"line\">          &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n   </div><div class=\"line\">          &lt;/pattern&gt;   </div><div class=\"line\">      &lt;/layout&gt;   </div><div class=\"line\"> &lt;/appender&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"异步写入\"><a href=\"#异步写入\" class=\"headerlink\" title=\"异步写入\"></a>异步写入</h1><pre><code class=\"yaml\">&lt;appender name=<span class=\"string\">\"ASYNC\"</span> class=<span class=\"string\">\"ch.qos.logback.classic.AsyncAppender\"</span><span class=\"string\">&gt;\n      &lt;queueSize&gt;512&lt;/queueSize&gt;\n      &lt;appender-ref ref=\"FILE\"/&gt;\n&lt;/appender&gt;</span>\n</code></pre>\n"},{"title":"Hello World","url":"https://yangzhiw.github.io/2016/07/21/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"}]